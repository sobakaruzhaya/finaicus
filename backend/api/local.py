from fastapi import APIRouter, HTTPException, Body
from typing import List, Dict, Any, Optional, Tuple
import json
import re
import os
from utils.finam import FinamAPIClient
from utils.openrouter import call_llm
from pydantic import BaseModel
from dotenv import load_dotenv
from os.path import join, dirname


dotenv_path = join(dirname(__file__), '../.env')
load_dotenv(dotenv_path)

FINAM_TOKEN = os.getenv("FINAM_ACCESS_TOKEN")


router = APIRouter()
SESSIONS: Dict[str, List[Dict[str, str]]] = {}

def create_system_prompt(): 
    return """
–¢—ã ‚Äî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞, –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å Finam TradeAPI —á–µ—Ä–µ–∑ Python-–∫–ª–∏–µ–Ω—Ç. –¢–≤–æ—ë –∏–º—è - FINAICUS

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, **–≤–æ–∑–≤—Ä–∞—â–∞—è –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç–∞**, –∞ –Ω–µ HTTP-–∑–∞–ø—Ä–æ—Å.

### üîß –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!):

–ï—Å–ª–∏ –Ω—É–∂–µ–Ω API-–∑–∞–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å **—Ä–æ–≤–Ω–æ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏**:

API_CALL: <–Ω–∞–∑–≤–∞–Ω–∏–µ_–º–µ—Ç–æ–¥–∞>
PARAMS: {"–∫–ª—é—á": "–∑–Ω–∞—á–µ–Ω–∏–µ", ...}

üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏ –∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:

- `get_quote(symbol: str)` ‚Äî —Ç–µ–∫—É—â–∞—è –∫–æ—Ç–∏—Ä–æ–≤–∫–∞
- `get_orderbook(symbol: str, depth: int = 10)` ‚Äî —Å—Ç–∞–∫–∞–Ω
- `get_candles(symbol: str, timeframe: str = "D", start: str | None = None, end: str | None = None)` ‚Äî —Å–≤–µ—á–∏
- `get_account(account_id: str)` ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á—ë—Ç–µ (–Ω–æ —Ç—ã –ù–ï –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å account_id –≤ PARAMS!)
- `get_orders(account_id: str)` ‚Äî –æ—Ä–¥–µ—Ä–∞ (account_id –Ω–µ —É–∫–∞–∑—ã–≤–∞–π!)
- `get_order(account_id: str, order_id: str)` ‚Äî –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä (—É–∫–∞–∑—ã–≤–∞–π —Ç–æ–ª—å–∫–æ order_id)
- `create_order(account_id: str, order_ dict)` ‚Äî —Å–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä (–ø–µ—Ä–µ–¥–∞–≤–∞–π —Ç–æ–ª—å–∫–æ order_data!)
- `cancel_order(account_id: str, order_id: str)` ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä (—É–∫–∞–∑—ã–≤–∞–π —Ç–æ–ª—å–∫–æ order_id)
- `get_trades(account_id: str, start: str | None = None, end: str | None = None)` ‚Äî —Å–¥–µ–ª–∫–∏
- `get_positions(account_id: str)` ‚Äî –ø–æ–∑–∏—Ü–∏–∏



> ‚ö†Ô∏è –í–ê–ñ–ù–û:
> - **–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π `account_id` –≤ `PARAMS`** ‚Äî –æ–Ω –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
> - –î–ª—è `create_order` –ø–µ—Ä–µ–¥–∞–≤–∞–π —Ç–æ–ª—å–∫–æ —Ç–µ–ª–æ –æ—Ä–¥–µ—Ä–∞: `{"symbol": "...", "side": "buy", "type": "limit", "quantity": ..., "price": ...}`
> - –í—Å–µ —Å—Ç—Ä–æ–∫–∏ ‚Äî –≤ –¥–≤–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö, –∫–∞–∫ –≤ JSON.
> - –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç API ‚Äî –æ—Ç–≤–µ—á–∞–π –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –±–ª–æ–∫–∞ `API_CALL`.
> - –ë–∏—Ä–∂–∞ MISX
> - —Å–µ–π—á–∞—Å –¥–∞—Ç–∞ 4.10.2025
> - start_time=2025-01-01T00:00:00Z&interval.end_time=2025-03-15T00:00:00Z - —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
> - –¢—ã –ú–û–ñ–ï–®–¨ –¥–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏


TIME_FRAME_UNSPECIFIED	0	–¢–∞–π–º—Ñ—Ä–µ–π–º –Ω–µ —É–∫–∞–∑–∞–Ω
TIME_FRAME_M1	1	1 –º–∏–Ω—É—Ç–∞. –ì–ª—É–±–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö 7 –¥–Ω–µ–π.
TIME_FRAME_M5	5	5 –º–∏–Ω—É—Ç. –ì–ª—É–±–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö 30 –¥–Ω–µ–π.
TIME_FRAME_M15	9	15 –º–∏–Ω—É—Ç. –ì–ª—É–±–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö 30 –¥–Ω–µ–π.
TIME_FRAME_M30	11	30 –º–∏–Ω—É—Ç. –ì–ª—É–±–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö 30 –¥–Ω–µ–π.
TIME_FRAME_H1	12	1 —á–∞—Å. –ì–ª—É–±–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö 30 –¥–Ω–µ–π.
TIME_FRAME_H2	13	2 —á–∞—Å–∞. –ì–ª—É–±–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö 30 –¥–Ω–µ–π.
TIME_FRAME_H4	15	4 —á–∞—Å–∞. –ì–ª—É–±–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö 30 –¥–Ω–µ–π.
TIME_FRAME_H8	17	8 —á–∞—Å–æ–≤. –ì–ª—É–±–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö 30 –¥–Ω–µ–π.
TIME_FRAME_D	19	–î–µ–Ω—å. –ì–ª—É–±–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö 365 –¥–Ω–µ–π.
TIME_FRAME_W	20	–ù–µ–¥–µ–ª—è. –ì–ª—É–±–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö 365*5 –¥–Ω–µ–π.
TIME_FRAME_MN	21	–ú–µ—Å—è—Ü. –ì–ª—É–±–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö 365*5 –¥–Ω–µ–π.
TIME_FRAME_QR	22	–ö–≤–∞—Ä—Ç–∞–ª. –ì–ª—É–±–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö 365*5 –¥–Ω–µ–π.



### üó£Ô∏è –ü—Ä–∏–º–µ—Ä—ã:


**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –°–±–µ—Ä–∞?  
**–¢—ã:**  
API_CALL: get_candles  
PARAMS: {"symbol": "SBER@MISX", "timeframe": "TIME_FRAME_D", "start": "2025-01-01T00:00:00Z", "end": "2025-10-04T00:00:00Z"}

**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** –ö–∞–∫–∞—è —Ü–µ–Ω–∞ —É –°–±–µ—Ä–±–∞–Ω–∫–∞?  
**–¢—ã:**  
API_CALL: get_quote
PARAMS: {"symbol": "SBER@MISX"}

**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** –ü–æ–∫–∞–∂–∏ –º–æ–∏ –æ—Ä–¥–µ—Ä–∞.  
**–¢—ã:**  
API_CALL: get_orders
PARAMS: {}

**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** –ö—É–ø–∏  –∞–∫—Ü–∏–π –ì–∞–∑–ø—Ä–æ–º–∞ –ø–æ 240 —Ä—É–±.  
**–¢—ã:**  

API_CALL: create_order
PARAMS: {
                "symbol": "GAZP@MISX",
                "quantity": {
                    "value": "10.0"
                },
                "side": "SIDE_SELL",
                "type": "ORDER_TYPE_LIMIT",
                "timeInForce": "TIME_IN_FORCE_DAY",
                "limitPrice": {
                    "value": "240"
                },
                "stopCondition": "STOP_CONDITION_UNSPECIFIED",
                "legs": [],
                "clientOrderId": "test005"
}


**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** –ß—Ç–æ —Ç–∞–∫–æ–µ —Å–ø—Ä–µ–¥?  
**–¢—ã:**  
–°–ø—Ä–µ–¥ ‚Äî —ç—Ç–æ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –ª—É—á—à–µ–π —Ü–µ–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ (bid) –∏ –ø—Ä–æ–¥–∞–∂–∏ (ask). –ß–µ–º –æ–Ω –º–µ–Ω—å—à–µ, —Ç–µ–º –≤—ã—à–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞.

---

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –±—É–¥—å —Ç–æ—á–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º.

        
        """

def extract_api_call(text: str) -> Tuple[Optional[str], Optional[Dict]]:
    if "API_CALL:" not in text:
        return None, None
    print(text)
    call_match = re.search(r"API_CALL:\s*(\w+)", text)
    params_match = re.search(r"PARAMS:\s*(\{.*?\})", text, re.DOTALL)
    if not call_match or not params_match:
        return None, None

    method = call_match.group(1)
    params_str = params_match.group(1).strip()
    print(method, params_str)
    try:
        params = json.loads(params_str)
        return method, params
    except json.JSONDecodeError:
        return None, None


class MessageRequest(BaseModel):
    session_id: str  
    user_message: str
    account_id: Optional[str] = None 

class MessageResponse(BaseModel):
    answer: str
    session_id: str

@router.post("/message", response_model=MessageResponse)
async def message(request: MessageRequest = Body(...)):
    finam_client = FinamAPIClient(access_token=FINAM_TOKEN)

    session_id = request.session_id
    user_msg = request.user_message
    account_id = request.account_id


    if session_id not in SESSIONS:
        SESSIONS[session_id] = [{"role": "system", "content": create_system_prompt()}]

    conversation = SESSIONS[session_id]
    conversation.append({"role": "user", "content": user_msg})

    try:
        response = call_llm(conversation, temperature=0.3)
        assistant_message = response["choices"][0]["message"]["content"]

        method_name, params = extract_api_call(assistant_message)

        if method_name and params is not None:
            requires_account = method_name in {
                "get_account", "get_orders", "get_order", "create_order",
                "cancel_order", "get_trades", "get_positions"
            }

            api_response: Dict[str, Any] = {"error": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}

            try:
                if requires_account:
                    if not account_id:
                        api_response = {"error": "account_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞"}
                    else:
                        if method_name == "create_order":
                            api_response = finam_client.create_order(account_id, params)
                        elif method_name == "cancel_order":
                            order_id = params.get("order_id")
                            if not order_id:
                                api_response = {"error": "order_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è cancel_order"}
                            else:
                                api_response = finam_client.cancel_order(account_id, order_id)
                        elif method_name == "get_order":
                            order_id = params.get("order_id")
                            if not order_id:
                                api_response = {"error": "order_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è get_order"}
                            else:
                                api_response = finam_client.get_order(account_id, order_id)
                        else:
                            api_response = getattr(finam_client, method_name)(account_id)
                else:
                    print(getattr(finam_client, method_name)(**params))
                    api_response = getattr(finam_client, method_name)(**params)

            except AttributeError:
                api_response = {"error": f"–ú–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {method_name}"}
            except Exception as e:
                api_response = {"error": str(e)}


            conversation.append({"role": "assistant", "content": assistant_message})
            conversation.append({
                "role": "user",
                "content": f"–†–µ–∑—É–ª—å—Ç–∞—Ç API –≤—ã–∑–æ–≤–∞: {api_response}\n\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ.",
            })


            response = call_llm(conversation, temperature=0.3)
            assistant_message = response["choices"][0]["message"]["content"]

        conversation.append({"role": "assistant", "content": assistant_message})
        SESSIONS[session_id] = conversation

        return MessageResponse(answer=assistant_message, session_id=session_id)

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")