#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è submission.csv —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenRouter API –∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/generate_submission.py --test test.csv --output submission.csv
"""

import csv
import os
import sys
from pathlib import Path
from typing import List, Dict, Any

import click
import httpx
from dotenv import load_dotenv

load_dotenv()

SYSTEM_PROMPT = """
–¢—ã ‚Äî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞, –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å Finam TradeAPI —á–µ—Ä–µ–∑ Python-–∫–ª–∏–µ–Ω—Ç. 
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:

API_CALL: <–Ω–∞–∑–≤–∞–Ω–∏–µ_–º–µ—Ç–æ–¥–∞>
PARAMS: {"–∫–ª—é—á": "–∑–Ω–∞—á–µ–Ω–∏–µ", ...}


---

## üìö –í–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (REST API Finam)

### –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è  
- –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∏–¥—É—Ç –∫ –±–∞–∑–æ–≤–æ–º—É –ø—É—Ç–∏ REST API Finam. ([tradeapi.finam.ru](https://tradeapi.finam.ru/docs/guides/rest/))  
- –¢–æ–∫–µ–Ω / –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞ / HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–≤–Ω–µ —Ç–≤–æ–µ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏).  

### –°—á–µ—Ç–∞ (Accounts)  
- `/accounts` ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å—á–µ—Ç–∞–º.  
- `/accounts/{account_id}` ‚Äî –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å—á–µ—Ç—É.  

### –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (Instruments)  
- `/instruments` ‚Äî —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ / —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è.  
- `/instruments/{symbol}/quotes/latest` ‚Äî –∫–æ—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É.  
- `/instruments/{symbol}/orderbook` ‚Äî —Å—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫.  
- `/instruments/{symbol}/bars` ‚Äî –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (—Å–≤–µ—á–∏) / –±–∞—Ä—ã.  

### –ó–∞—è–≤–∫–∏ –∏ –æ—Ä–¥–µ—Ä–∞ (Orders / Trades)  
- `/accounts/{account_id}/orders` ‚Äî –≤—Å–µ –∑–∞—è–≤–∫–∏ –ø–æ —Å—á—ë—Ç—É.  
- `/accounts/{account_id}/orders/{order_id}` ‚Äî –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∑–∞—è–≤–∫–∞.  
- `/accounts/{account_id}/trades` ‚Äî —Å–¥–µ–ª–∫–∏ –ø–æ —Å—á—ë—Ç—É (—Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏)  
- –û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏: `DELETE /accounts/{account_id}/orders/{order_id}`  
- –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É: `POST /accounts/{account_id}/orders`  

---

üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã:
- get_quote(symbol: str)
- get_orderbook(symbol: str, depth: int = 10)
- get_candles(symbol: str, timeframe: str = "D", start: str | None = None, end: str | None = None)
- get_account(account_id: str) ‚Üí account_id –ù–ï –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å
- get_orders(account_id: str)
- get_order(account_id: str, order_id: str) ‚Üí —Ç–æ–ª—å–∫–æ order_id
- create_order(account_id: str, order_data)
- cancel_order(account_id: str, order_id: str)
- get_trades(account_id: str, start: str | None = None, end: str | None = None)
- get_positions(account_id: str)

‚ö†Ô∏è –ü—Ä–∞–≤–∏–ª–∞:
- –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π account_id –≤ PARAMS ‚Äî –æ–Ω –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
- –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ–æ—á–µ–≤–∏–¥–µ–Ω, –≤—ã–±–µ—Ä–∏ –±–ª–∏–∂–∞–π—à–∏–π –ø–æ —Å–º—ã—Å–ª—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ü–µ–Ω–∞ ‚Üí get_quote, –∏—Å—Ç–æ—Ä–∏—è ‚Üí get_candles, –∑–∞—è–≤–∫–∏ ‚Üí get_orders, –ø–æ–∑–∏—Ü–∏–∏ ‚Üí get_positions).
- –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –ø—É—Å—Ç—ã–µ –≤—ã–∑–æ–≤—ã.
- –í—Å–µ —Å—Ç—Ä–æ–∫–∏ ‚Äî —Ç–æ–ª—å–∫–æ –≤ JSON-—Ñ–æ—Ä–º–∞—Ç–µ —Å –¥–≤–æ–π–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏.
- –ë–∏—Ä–∂–∞: MISX
- –°–µ–≥–æ–¥–Ω—è: 2025-10-04
- –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: 2025-01-01T00:00:00Z

–ü—Ä–∏–º–µ—Ä—ã:

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ö–∞–∫–∞—è —Ü–µ–Ω–∞ —É –°–±–µ—Ä–±–∞–Ω–∫–∞?
AI:
API_CALL: get_quote
PARAMS: {"symbol": "SBER@MISX"}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –°–±–µ—Ä–∞ —Å —è–Ω–≤–∞—Ä—è?
AI:
API_CALL: get_candles
PARAMS: {"symbol": "SBER@MISX", "timeframe": "TIME_FRAME_D", "start": "2025-01-01T00:00:00Z", "end": "2025-10-04T00:00:00Z"}
"""

METHOD_TO_HTTP = {
    "get_quote": ("GET", "/v1/instruments/{symbol}/quotes/latest"),
    "get_orderbook": ("GET", "/v1/instruments/{symbol}/orderbook"),
    "get_candles": ("GET", "/v1/instruments/{symbol}/bars"),
    "get_account": ("GET", "/v1/accounts/{account_id}"),
    "get_orders": ("GET", "/v1/accounts/{account_id}/orders"),
    "get_order": ("GET", "/v1/accounts/{account_id}/orders/{order_id}"),
    "get_trades": ("GET", "/v1/accounts/{account_id}/trades"),
    "get_positions": ("GET", "/v1/accounts/{account_id}"),
    "create_order": ("POST", "/v1/accounts/{account_id}/orders"),
    "cancel_order": ("DELETE", "/v1/accounts/{account_id}/orders/{order_id}"),
}


def call_openrouter(messages: List[Dict[str, str]], model: str = "openai/gpt-4o-mini") -> Dict[str, Any]:
    api_key = os.getenv("OPENROUTER_API_KEY")
    if not api_key:
        raise ValueError("OPENROUTER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    headers = {
        "Authorization": f"Bearer {api_key}",
        "HTTP-Referer": "https://github.com/your-project",
        "X-Title": "Finam API Assistant",
        "Content-Type": "application/json",
    }

    json_data = {
        "model": model,
        "messages": messages,
        "temperature": 0.0,
        "max_tokens": 128, 
    }

    with httpx.Client(timeout=30.0) as client:
        response = client.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json=json_data,
        )
        response.raise_for_status()
        return response.json()


def extract_api_call(text: str):
    import re
    import json

    if "API_CALL:" not in text:
        return None, None

    call_match = re.search(r"API_CALL:\s*(\w+)", text)
    params_match = re.search(r"PARAMS:\s*(\{.*?\})", text, re.DOTALL)

    if not call_match or not params_match:
        return None, None

    method = call_match.group(1)
    try:
        params = json.loads(params_match.group(1))
        return method, params
    except Exception:
        return None, None


def convert_to_http_request(method_name: str, params: dict, account_id: str) -> tuple[str, str]:
    if method_name not in METHOD_TO_HTTP:
        return "GET", "/v1/instruments"

    http_method, path_template = METHOD_TO_HTTP[method_name]
    path = path_template

    if "{symbol}" in path and "symbol" in params:
        path = path.replace("{symbol}", params["symbol"])

    if "{order_id}" in path and "order_id" in params:
        path = path.replace("{order_id}", params["order_id"])

    if "{account_id}" in path:
        path = path.replace("{account_id}", account_id)

    query_params = []
    if method_name == "get_candles":
        if "timeframe" in params:
            query_params.append(f"tf={params['timeframe']}")
        if "start" in params:
            query_params.append(f"interval.start_time={params['start']}")
        if "end" in params:
            query_params.append(f"interval.end_time={params['end']}")
    elif method_name == "get_trades":
        if "start" in params:
            query_params.append(f"interval.start_time={params['start']}")
        if "end" in params:
            query_params.append(f"interval.end_time={params['end']}")

    if query_params:
        path += "?" + "&".join(query_params)

    return http_method, path


def smart_fallback(question: str) -> tuple[str, str]:
    q = question.lower()
    if any(w in q for w in ["—Ü–µ–Ω–∞", "–∫–æ—Ç–∏—Ä–æ–≤–∫–∞", "quote"]):
        return "GET", "/v1/instruments/SBER@MISX/quotes/latest"
    if any(w in q for w in ["—Å–≤–µ—á", "–¥–∏–Ω–∞–º–∏–∫–∞", "–∏—Å—Ç–æ—Ä", "–≥—Ä–∞—Ñ–∏–∫"]):
        return "GET", "/v1/instruments/SBER@MISX/bars?tf=TIME_FRAME_D"
    if any(w in q for w in ["–æ—Ä–¥–µ—Ä", "–∑–∞—è–≤–∫"]):
        return "GET", "/v1/accounts/{account_id}/orders"
    if any(w in q for w in ["–ø–æ–∑–∏—Ü–∏", "portfolio"]):
        return "GET", "/v1/accounts/{account_id}"
    return "GET", "/v1/instruments"


def process_question(uid: str, question: str) -> tuple[str, str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (http_method, request_path) –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞"""
    messages = [
        {"role": "system", "content": SYSTEM_PROMPT},
        {"role": "user", "content": question},
    ]

    try:
        response = call_openrouter(messages)
        llm_text = response["choices"][0]["message"]["content"]

        method_name, params = extract_api_call(llm_text)

        if method_name and params is not None:
            http_method, request_path = convert_to_http_request(method_name, params, account_id=uid)
            return http_method, request_path
        else:
            return smart_fallback(question)

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ '{question[:50]}...': {e}", file=sys.stderr)
        return smart_fallback(question)


@click.command()
@click.option("--test", "-t", type=click.Path(exists=True), default="test.csv", help="–ü—É—Ç—å –∫ test.csv")
@click.option("--output", "-o", type=click.Path(), default="submission.csv", help="–ü—É—Ç—å –∫ submission.csv")
def main(test: str, output: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è submission.csv"""
    test_path = Path(test)
    output_path = Path(output)

    questions = []
    with open(test_path, encoding="utf-8") as f:
        reader = csv.DictReader(f, delimiter=";")
        for row in reader:
            questions.append({"uid": row["uid"], "question": row["question"]})

    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ {test_path}")

    results = []
    for item in questions:
        uid = item["uid"]
        question = item["question"]
        http_method, request_path = process_question(uid, question)
        results.append({"uid": uid, "type": http_method, "request": request_path})
        print(f"‚úÖ {uid}: {http_method} {request_path}")

    output_path.parent.mkdir(parents=True, exist_ok=True)
    with open(output_path, "w", encoding="utf-8", newline="") as f:
        writer = csv.DictWriter(f, fieldnames=["uid", "type", "request"], delimiter=";")
        writer.writeheader()
        writer.writerows(results)

    print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {output_path}")


if __name__ == "__main__":
    main()
