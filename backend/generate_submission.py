#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è submission.csv —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–≤–æ–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –∏ OpenRouter API.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/generate_submission.py --test test.csv --output submission.csv
"""

import csv
import os
import sys
from pathlib import Path
from typing import List, Dict, Any

import click
import httpx
from dotenv import load_dotenv


load_dotenv()


SYSTEM_PROMPT = """
–¢—ã ‚Äî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞, –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å Finam TradeAPI —á–µ—Ä–µ–∑ Python-–∫–ª–∏–µ–Ω—Ç. –¢–≤–æ—ë –∏–º—è - FINAICUS

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, **–≤–æ–∑–≤—Ä–∞—â–∞—è –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –∫–ª–∏–µ–Ω—Ç–∞**, –∞ –Ω–µ HTTP-–∑–∞–ø—Ä–æ—Å.

### üîß –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!):

–ï—Å–ª–∏ –Ω—É–∂–µ–Ω API-–∑–∞–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å **—Ä–æ–≤–Ω–æ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏**:

API_CALL: <–Ω–∞–∑–≤–∞–Ω–∏–µ_–º–µ—Ç–æ–¥–∞>
PARAMS: {"–∫–ª—é—á": "–∑–Ω–∞—á–µ–Ω–∏–µ", ...}

üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏ –∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:

- `get_quote(symbol: str)` ‚Äî —Ç–µ–∫—É—â–∞—è –∫–æ—Ç–∏—Ä–æ–≤–∫–∞
- `get_orderbook(symbol: str, depth: int = 10)` ‚Äî —Å—Ç–∞–∫–∞–Ω
- `get_candles(symbol: str, timeframe: str = "D", start: str | None = None, end: str | None = None)` ‚Äî —Å–≤–µ—á–∏
- `get_account(account_id: str)` ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á—ë—Ç–µ (–Ω–æ —Ç—ã –ù–ï –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å account_id –≤ PARAMS!)
- `get_orders(account_id: str)` ‚Äî –æ—Ä–¥–µ—Ä–∞ (account_id –Ω–µ —É–∫–∞–∑—ã–≤–∞–π!)
- `get_order(account_id: str, order_id: str)` ‚Äî –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä (—É–∫–∞–∑—ã–≤–∞–π —Ç–æ–ª—å–∫–æ order_id)
- `create_order(account_id: str, order_ dict)` ‚Äî —Å–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä (–ø–µ—Ä–µ–¥–∞–≤–∞–π —Ç–æ–ª—å–∫–æ order_data!)
- `cancel_order(account_id: str, order_id: str)` ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä (—É–∫–∞–∑—ã–≤–∞–π —Ç–æ–ª—å–∫–æ order_id)
- `get_trades(account_id: str, start: str | None = None, end: str | None = None)` ‚Äî —Å–¥–µ–ª–∫–∏
- `get_positions(account_id: str)` ‚Äî –ø–æ–∑–∏—Ü–∏–∏



> ‚ö†Ô∏è –í–ê–ñ–ù–û:
> - **–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π `account_id` –≤ `PARAMS`** ‚Äî –æ–Ω –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
> - –î–ª—è `create_order` –ø–µ—Ä–µ–¥–∞–≤–∞–π —Ç–æ–ª—å–∫–æ —Ç–µ–ª–æ –æ—Ä–¥–µ—Ä–∞: `{"symbol": "...", "side": "buy", "type": "limit", "quantity": ..., "price": ...}`
> - –í—Å–µ —Å—Ç—Ä–æ–∫–∏ ‚Äî –≤ –¥–≤–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö, –∫–∞–∫ –≤ JSON.
> - –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç API ‚Äî –æ—Ç–≤–µ—á–∞–π –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –±–ª–æ–∫–∞ `API_CALL`.
> - –ë–∏—Ä–∂–∞ MISX
> - —Å–µ–π—á–∞—Å –¥–∞—Ç–∞ 4.10.2025
> - start_time=2025-01-01T00:00:00Z&interval.end_time=2025-03-15T00:00:00Z - —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
> - –¢—ã –ú–û–ñ–ï–®–¨ –¥–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏


TIME_FRAME_UNSPECIFIED	0	–¢–∞–π–º—Ñ—Ä–µ–π–º –Ω–µ —É–∫–∞–∑–∞–Ω
TIME_FRAME_M1	1	1 –º–∏–Ω—É—Ç–∞. –ì–ª—É–±–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö 7 –¥–Ω–µ–π.
TIME_FRAME_M5	5	5 –º–∏–Ω—É—Ç. –ì–ª—É–±–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö 30 –¥–Ω–µ–π.
TIME_FRAME_M15	9	15 –º–∏–Ω—É—Ç. –ì–ª—É–±–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö 30 –¥–Ω–µ–π.
TIME_FRAME_M30	11	30 –º–∏–Ω—É—Ç. –ì–ª—É–±–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö 30 –¥–Ω–µ–π.
TIME_FRAME_H1	12	1 —á–∞—Å. –ì–ª—É–±–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö 30 –¥–Ω–µ–π.
TIME_FRAME_H2	13	2 —á–∞—Å–∞. –ì–ª—É–±–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö 30 –¥–Ω–µ–π.
TIME_FRAME_H4	15	4 —á–∞—Å–∞. –ì–ª—É–±–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö 30 –¥–Ω–µ–π.
TIME_FRAME_H8	17	8 —á–∞—Å–æ–≤. –ì–ª—É–±–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö 30 –¥–Ω–µ–π.
TIME_FRAME_D	19	–î–µ–Ω—å. –ì–ª—É–±–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö 365 –¥–Ω–µ–π.
TIME_FRAME_W	20	–ù–µ–¥–µ–ª—è. –ì–ª—É–±–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö 365*5 –¥–Ω–µ–π.
TIME_FRAME_MN	21	–ú–µ—Å—è—Ü. –ì–ª—É–±–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö 365*5 –¥–Ω–µ–π.
TIME_FRAME_QR	22	–ö–≤–∞—Ä—Ç–∞–ª. –ì–ª—É–±–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö 365*5 –¥–Ω–µ–π.



### üó£Ô∏è –ü—Ä–∏–º–µ—Ä—ã:


**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –°–±–µ—Ä–∞?  
**–¢—ã:**  
API_CALL: get_candles  
PARAMS: {"symbol": "SBER@MISX", "timeframe": "TIME_FRAME_D", "start": "2025-01-01T00:00:00Z", "end": "2025-10-04T00:00:00Z"}

**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** –ö–∞–∫–∞—è —Ü–µ–Ω–∞ —É –°–±–µ—Ä–±–∞–Ω–∫–∞?  
**–¢—ã:**  
API_CALL: get_quote
PARAMS: {"symbol": "SBER@MISX"}

**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** –ü–æ–∫–∞–∂–∏ –º–æ–∏ –æ—Ä–¥–µ—Ä–∞.  
**–¢—ã:**  
API_CALL: get_orders
PARAMS: {}

**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** –ö—É–ø–∏  –∞–∫—Ü–∏–π –ì–∞–∑–ø—Ä–æ–º–∞ –ø–æ 240 —Ä—É–±.  
**–¢—ã:**  

API_CALL: create_order
PARAMS: {
                "symbol": "GAZP@MISX",
                "quantity": {
                    "value": "10.0"
                },
                "side": "SIDE_SELL",
                "type": "ORDER_TYPE_LIMIT",
                "timeInForce": "TIME_IN_FORCE_DAY",
                "limitPrice": {
                    "value": "240"
                },
                "stopCondition": "STOP_CONDITION_UNSPECIFIED",
                "legs": [],
                "clientOrderId": "test005"
}


**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** –ß—Ç–æ —Ç–∞–∫–æ–µ —Å–ø—Ä–µ–¥?  
**–¢—ã:**  
–°–ø—Ä–µ–¥ ‚Äî —ç—Ç–æ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –ª—É—á—à–µ–π —Ü–µ–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ (bid) –∏ –ø—Ä–æ–¥–∞–∂–∏ (ask). –ß–µ–º –æ–Ω –º–µ–Ω—å—à–µ, —Ç–µ–º –≤—ã—à–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞.

---

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –±—É–¥—å —Ç–æ—á–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º.

        
        """

METHOD_TO_HTTP = {
    "get_quote": ("GET", "/v1/instruments/{symbol}/quotes/latest"),
    "get_orderbook": ("GET", "/v1/instruments/{symbol}/orderbook"),
    "get_candles": ("GET", "/v1/instruments/{symbol}/bars"),
    "get_account": ("GET", "/v1/accounts/{account_id}"),
    "get_orders": ("GET", "/v1/accounts/{account_id}/orders"),
    "get_order": ("GET", "/v1/accounts/{account_id}/orders/{order_id}"),
    "get_trades": ("GET", "/v1/accounts/{account_id}/trades"),
    "get_positions": ("GET", "/v1/accounts/{account_id}"),
    "create_order": ("POST", "/v1/accounts/{account_id}/orders"),
    "cancel_order": ("DELETE", "/v1/accounts/{account_id}/orders/{order_id}"),
}


def call_openrouter(messages: List[Dict[str, str]], model: str = "openai/gpt-4o-mini") -> Dict[str, Any]:
    api_key = os.getenv("OPENROUTER_API_KEY")
    if not api_key:
        raise ValueError("OPENROUTER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    headers = {
        "Authorization": f"Bearer {api_key}",
        "HTTP-Referer": "https://github.com/your-project",
        "X-Title": "Finam API Assistant",
        "Content-Type": "application/json",
    }

    json_data = {
        "model": model,
        "messages": messages,
        "temperature": 0.0,
        "max_tokens": 256,
    }

    with httpx.Client(timeout=30.0) as client:
        response = client.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json=json_data,
        )
        response.raise_for_status()
        return response.json()


def extract_api_call(text: str):
    import re
    import json

    if "API_CALL:" not in text:
        return None, None

    call_match = re.search(r"API_CALL:\s*(\w+)", text)
    params_match = re.search(r"PARAMS:\s*(\{.*?\})", text, re.DOTALL)

    if not call_match or not params_match:
        return None, None

    method = call_match.group(1)
    try:
        params = json.loads(params_match.group(1))
        return method, params
    except Exception:
        return None, None


def convert_to_http_request(method_name: str, params: dict, account_id: str) -> tuple[str, str]:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –≤ HTTP-–∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'GET /path?query'"""
    if method_name not in METHOD_TO_HTTP:
        return "GET", "/v1/assets"

    http_method, path_template = METHOD_TO_HTTP[method_name]


    path = path_template


    if "{symbol}" in path and "symbol" in params:
        path = path.replace("{symbol}", params["symbol"])

    if "{order_id}" in path and "order_id" in params:
        path = path.replace("{order_id}", params["order_id"])

    if "{account_id}" in path:
        path = path.replace("{account_id}", account_id)

    query_params = []
    if method_name == "get_candles":
        if "timeframe" in params:
            query_params.append(f"tf={params['timeframe']}")
        if "start" in params:
            query_params.append(f"interval.start_time={params['start']}")
        if "end" in params:
            query_params.append(f"interval.end_time={params['end']}")
    elif method_name == "get_trades":
        if "start" in params:
            query_params.append(f"interval.start_time={params['start']}")
        if "end" in params:
            query_params.append(f"interval.end_time={params['end']}")

    if query_params:
        path += "?" + "&".join(query_params)

    return http_method, path


def process_question(uid: str, question: str) -> tuple[str, str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (http_method, request_path) –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞, –∏—Å–ø–æ–ª—å–∑—É—è uid –∫–∞–∫ account_id"""
    messages = [
        {"role": "system", "content": SYSTEM_PROMPT},
        {"role": "user", "content": question},
    ]

    try:
        response = call_openrouter(messages)
        llm_text = response["choices"][0]["message"]["content"]

        method_name, params = extract_api_call(llm_text)

        if method_name and params is not None:
            http_method, request_path = convert_to_http_request(method_name, params, account_id=uid)
            return http_method, request_path
        else:
   
            return "GET", "/v1/assets"

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ '{question[:50]}...': {e}", file=sys.stderr)
        return "GET", "/v1/assets"


@click.command()
@click.option("--test", "-t", type=click.Path(exists=True), default="test.csv", help="–ü—É—Ç—å –∫ test.csv")
@click.option("--output", "-o", type=click.Path(), default="submission.csv", help="–ü—É—Ç—å –∫ submission.csv")
def main(test: str, output: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è submission.csv —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–≤–æ–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
    test_path = Path(test)
    output_path = Path(output)


    questions = []
    with open(test_path, encoding="utf-8") as f:
        reader = csv.DictReader(f, delimiter=";")
        for row in reader:
            questions.append({"uid": row["uid"], "question": row["question"]})

    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ {test_path}")


    results = []
    for item in questions:
        uid = item["uid"]
        question = item["question"]
        http_method, request_path = process_question(uid, question)
        results.append({"uid": uid, "type": http_method, "request": request_path})
        print(f"‚úÖ {uid}: {http_method} {request_path}")


    output_path.parent.mkdir(parents=True, exist_ok=True)
    with open(output_path, "w", encoding="utf-8", newline="") as f:
        writer = csv.DictWriter(f, fieldnames=["uid", "type", "request"], delimiter=";")
        writer.writeheader()
        writer.writerows(results)

    print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {output_path}")


if __name__ == "__main__":
    main()